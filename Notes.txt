1. Apa itu GIT dan GITHUB
https://www.youtube.com/watch?v=lTMZxWMjXQU&list=PLFIM0718LjIVknj6sgsSceMqlq242-jNf

- Git dan github bisa dipakai terpisah 
- Git adalah salah satu VCS --> kelola perubahan dokumen/source code
- bisa kembali ke versi sebelumnya 
- tau siapa yang melakukan dan kapan

Kenapa? 
- kesulitan organize versi program 
- kolaborasi : bisa sharing

Bedanya sama dropbox dan gdrive? 
- kurang fleksibel karena buka ngatur source code 

Git : 
- kelola perubahan file di dalam folder (repository/repo)
- commit --> git bakal rekam snapshot 
- file yg disave cuma 1, tp dia bakal nyimpen perubahan perubahan yang dilakukan

isi tiap commit:
hash/string random penanda untuk tiap commit 
author : siapa yang commit 
date: kapan 
keterangan

commit --> branch --> merge (untuk gabungin)

GitHub: 
- layanan cloud utk simpan dan kelola project atau repo git

GITHUB + GIT 
bisa puh n pull commit antar keduanya 
harus bikin github jadi remote (jd sumber) --> clone ke git --> pull and push commit

repo : folder 
commit: rekaman/snapshot dari repo 
hash: penanda unik pada commit 
checkout: berpindah ke sebuah commit 
bracnk: cabang 
merge : gabungkan branch 
remote: sumber yang memiliki repo (bisa github, gitLab, bitbucket,  dll)
clone: ambil repo dari remote 
push : kirim commit 
pull: ambil commit
pull req : meminta pemilik repo narik perubahan yg kita lakukan 

2. Bekerja dengan GITHUB 
https://www.youtube.com/watch?v=Q3Id0DgcrXY&list=PLFIM0718LjIVknj6sgsSceMqlq242-jNf&index=2
Intinya 
- cara bikin akun, 
- fitur fitur basic di gthub 
- cara bikin repo, 
- bikin new file di repo, 
- commit, 
- liat history 
insight --> network --> keliatan commit dalam bentuk titik-titik (timeline commit, branch dll)

3. GITHUB: BRANCH 
https://www.youtube.com/watch?v=k1QXd-8VbPY&list=PLFIM0718LjIVknj6sgsSceMqlq242-jNf&index=3
untuk apa? 
- kalo ada fitur yang masih bingung, taro brach dulu jd perubahannya independen 
- nanti bisa dimerge 
- bisa untuk collab gt 

klo mau merge --> compare and pull request (jd nnti dari branch bakal dimasukin ke main) 
bakal dicek dulu (merge comflict) --> resolve conflct 

dr branch bikin pull req --> acc merge 
fast-forward merging
rewind merging

4. GITHUB: FORK 
https://www.youtube.com/watch?v=8rry2ncZmfg&list=PLFIM0718LjIVknj6sgsSceMqlq242-jNf&index=4
Fork: duplikat repo lain serta historynya 
- biar ga ganggu repo aslinya 
- fork tidak sama dengan clone 
akan ada keterangan fork sumber 
fork --> edit --> commit --> pull req kalo mau kirim ke sumber 
liat pull req --> bisa edit dulu --> kasih message ke sender --> merge pull req 

? kalo misal orang pull reqnya ke main, tp kita maunya naro dia ke branch, bisa ga?

5. Bekerja dengan GIT 
https://www.youtube.com/watch?v=e-6OkXRqWaE&list=PLFIM0718LjIVknj6sgsSceMqlq242-jNf&index=5

console/command prompt -- bakal ditulis sendiri perintahnya
git client (GUI) -- ada UI nya 
1. install git https://git-scm.com/
2. select component -> ceklis git bash & git GUI
3. adjusting PATH env -> pilih 3rd party software supaya bisa pake command prompt atau terminal lain 
4. ketik command di command prompt 
    git init 
    git add <file> 
    git status 
    git commit 
    git config 
    git branch 
    git help

Terdapat 3 area pada repo git 
folder dijadiin repo git -> git pantau perubahan --> git add -> git commit 
working tree : tempat bekerja 
staging area : ngasih tau git kalo ada perubahan
history : commit atau tidak? -> disimpan di history 

folder .git bakal simpen staging area dan history (defaultnya tersembunyi)

masuk ke folder (cd <path folder>)
inisisasi folder jadi repo (git init) --> bakal muncul sebagai 'master'
bikin file, edit file dll pokoknya perubahan 
simpan dulu ke staging area (git add <file>) (git add.) 
cek status di working tree (git status) 
commit (git commit -m "keterangan commit")
  kalo baru pertama kali commit, git blm tau ownernya
    git config --global user.name "your name"
    git config --global user.email "you@example.com"
cek history (git log) (git log -3) (git log -- <file>)
kembali ke versi sebelumnya (git checkout <5 digit pertama dari commit hash> -- <nama file>)
  git checkout 7667b -- style.css 
  kembali ke commit hash 7667b dengan hanya mengembalikan perubahan pada file style.css

kalo di vsc bisa langsung di consolenya aja edit file, bisa keliatan perubahannya di source control
bisa tulis aja langsung perintah perintahnya di terminal
ijo (blm ditambah ke repo) 
oren (udah diadd)


6. GIT BRANCH DAN MERGE 
inisiasi folder jadi repo 
